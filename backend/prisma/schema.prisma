// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int        @id @default(autoincrement()) @map("id")
  username          String?    @unique @map("username") @db.VarChar(32)
  email             String     @unique @map("email") @db.VarChar(255)
  firstName         String?    @map("first_name") @db.VarChar(64)
  lastName          String?    @map("last_name") @db.VarChar(64)
  password          String?    @map("password") @db.VarChar(72)
  avatarPath        String     @map("avatar_path") @db.VarChar(255)
  rating            Int        @default(400) @map("rating")
  status            UserStatus @default(OFFLINE) @map("status")
  fortyTwoAccountId String?    @unique @map("forty_two_account_id") @db.VarChar(255)
  googleAccountId   String?    @unique @map("google_account_id") @db.VarChar(255)
  is2faEnabled      Boolean    @default(false) @map("is_2fa_enabled")
  verifyEmailToken  String?    @unique() @map("verify_email_token") @db.VarChar(255)
  isEmailVerified   Boolean    @default(false) @map("is_email_verified")
  createdAt         DateTime   @default(now()) @map("created_at") @db.Timestamp()
  updatedAt         DateTime   @updatedAt @map("updated_at") @db.Timestamp()

  followedBy       Contact[]       @relation("following")
  following        Contact[]       @relation("follower")
  sent             Message[]       @relation("sent")
  received         Message[]       @relation("received")
  player           Game[]          @relation("player")
  opponent         Game[]          @relation("opponent")
  posts            Post[]
  postLikes        PostLike[]
  channels         Channel[]
  memberOfChannels ChannelMember[]
  blocking         Block[]         @relation("blocking")
  blocked          Block[]         @relation("blocked")
  achievements     Achievement[]

  @@map("users")
}

model Contact {
  id          Int           @id @default(autoincrement()) @map("id")
  followerId  Int           @map("follower_id")
  followingId Int           @map("following_id")
  status      ContactStatus @default(PENDING) @map("status")
  createdAt   DateTime      @default(now()) @map("created_at") @db.Timestamp()
  updatedAt   DateTime      @updatedAt @map("updated_at") @db.Timestamp()

  follower  User @relation("follower", fields: [followerId], references: [id])
  following User @relation("following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@map("contacts")
}

model Message {
  id         Int      @id @default(autoincrement()) @map("id")
  senderId   Int      @map("sender_id")
  receiverId Int      @map("receiver_id")
  isRead     Boolean  @default(false) @map("is_read")
  text       String   @map("text")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamp()

  sender   User @relation("sent", fields: [senderId], references: [id])
  receiver User @relation("received", fields: [receiverId], references: [id])

  @@map("messages")
}

model Game {
  id       Int        @id @default(autoincrement()) @map("id")
  winner   GameWinner @map("winner")
  duration Int        @map("duration")

  playerId         Int @map("player_id")
  playerScore      Int @map("player_score")
  playerOldRating  Int @map("player_old_rating")
  playerNewRating  Int @map("player_new_rating")
  playerOldRanking Int @map("player_old_ranking")
  playerNewRanking Int @map("player_new_ranking")

  opponentId         Int @map("opponent_id")
  opponentScore      Int @map("opponent_score")
  opponentOldRating  Int @map("opponent_old_rating")
  opponentNewRating  Int @map("opponent_new_rating")
  opponentOldRanking Int @map("opponent_old_ranking")
  opponentNewRanking Int @map("opponent_new_ranking")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp()

  player   User @relation("player", fields: [playerId], references: [id])
  opponent User @relation("opponent", fields: [opponentId], references: [id])

  @@map("games")
}

model Channel {
  id           Int         @id @default(autoincrement()) @map("id")
  name         String      @map("name") @db.VarChar(255)
  description  String      @map("description") @db.Text
  imagePath    String      @map("image_path") @db.VarChar(255)
  membersCount Int         @default(1) @map("members_count")
  type         ChannelType @map("type")
  password     String?     @map("password") @db.VarChar(72)
  creatorId    Int         @map("creator_id")
  createdAt    DateTime    @default(now()) @map("created_at") @db.Timestamp()
  updatedAt    DateTime    @updatedAt @map("updated_at") @db.Timestamp()

  creator User @relation(fields: [creatorId], references: [id])

  members  ChannelMember[]
  messages ChannelMessage[]

  @@map("channels")
}

model ChannelMember {
  id         Int                 @id @default(autoincrement()) @map("id")
  memberId   Int                 @map("memeber_id")
  channelId  Int                 @map("channel_id")
  role       ChannelMemberRole   @map("role")
  state      ChannelMemberState? @map("state")
  mutedUntil DateTime?           @map("muted_until") @db.Timestamp()
  createdAt  DateTime            @default(now()) @map("created_at") @db.Timestamp()
  updatedAt  DateTime            @updatedAt @map("updated_at") @db.Timestamp()

  member   User             @relation(fields: [memberId], references: [id])
  channel  Channel          @relation(fields: [channelId], references: [id])
  messages ChannelMessage[]

  @@unique([channelId, memberId])
  @@map("channels_members")
}

model ChannelMessage {
  id        Int      @id @default(autoincrement()) @map("id")
  message   String   @map("message")
  senderId  Int      @map("sender_id")
  channelId Int      @map("channel_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp()

  sender  ChannelMember @relation(fields: [senderId], references: [id])
  channel Channel       @relation(fields: [channelId], references: [id])

  @@map("channels_messages")
}

model Post {
  id         Int      @id @default(autoincrement()) @map("id")
  content    String?  @map("text")
  imagePath  String?  @map("image_path") @db.VarChar(255)
  userId     Int      @map("user_id")
  likesCount Int      @default(0) @map("likes_count")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamp()

  postLikes PostLike[]

  owner User @relation(fields: [userId], references: [id])

  @@map("posts")
}

model PostLike {
  userId Int @map("user_id")
  postId Int @map("post_id")

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@id([userId, postId])
  @@map("posts_likes")
}

model Block {
  blocked   Int @map("user_id")
  blockedBy Int @map("blocked_by")

  user          User @relation("blocked", fields: [blocked], references: [id])
  blockedByUser User @relation("blocking", fields: [blockedBy], references: [id])

  @@id([blocked, blockedBy])
  @@map("blockes")
}

model Achievement {
  id        Int      @id @default(autoincrement()) @map("id")
  userId    Int      @map("user_id")
  name      String   @map("name") @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp()

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, name])
  @@map("achievements")
}

enum ContactStatus {
  ACCEPTED
  PENDING
}

enum UserStatus {
  OFFLINE
  ONLINE
  IN_GAME
}

enum GameWinner {
  PLAYER
  OPPONENT
}

enum ChannelType {
  PUBLIC
  PRIVATE
  PROTECTED
}

enum ChannelMemberRole {
  OWNER
  ADMIN
  MEMBER
}

enum ChannelMemberState {
  BANNED
  KICKED
}
