"use client";

import { useState, Fragment, useRef } from "react";
import { Dialog, Transition } from "@headlessui/react";
import QRCode from "react-qr-code";

import Button from "@components/atoms/Button";
import InputText from "@components/atoms/InputText";

import useVerifyTOTPMutation from "./useVerifyTOTPMutation";
import useTOTPQuery from "./useTOTPQuery";

interface TFAModalProps {
  isOpen: boolean;
  jwt: string | unknown;
  onClose: () => void;
  onSuccess: () => void;
}

function TFAModal(props: TFAModalProps) {
  const completeDevRef = useRef(null);
  const [isHidden, setHidden] = useState(false);
  const [token, seToken] = useState("");

  const { data: totpData } = useTOTPQuery({ jwt: props.jwt });

  const verifyTOTPMutation = useVerifyTOTPMutation({ jwt: props.jwt });

  function hideButton() {
    if (isHidden) {
      setHidden(false);
    } else {
      setHidden(true);
    }
  }

  async function verifyTOTPHandler() {
    try {
      await verifyTOTPMutation.mutateAsync({
        secret: totpData.secret,
        token,
      });

      props.onSuccess();
      props.onClose();
    } catch {}
  }

  return (
    <Transition appear show={props.isOpen} as={Fragment}>
      <Dialog
        as="div"
        initialFocus={completeDevRef}
        className="relative z-10"
        onClose={props.onClose}
      >
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-300"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-200"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-dark-fg-primary/60" />
        </Transition.Child>

        <div className="fixed inset-0 overflow-y-auto">
          <div className="flex min-h-full items-center justify-center p-4">
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-300"
              enterFrom="opacity-0 scale-95"
              enterTo="opacity-100 scale-100"
              leave="ease-in duration-200"
              leaveFrom="opacity-100 scale-100"
              leaveTo="opacity-0 scale-95"
            >
              <Dialog.Panel className="flex flex-col items-start  sm:items-n w-full max-w-max sm:p-4 p-10 rounded-lg bg-light-bg-tertiary dark:bg-dark-bg-primary space-y-8 lg:space-y-4 md:space-y-4 sm:space-y-4">
                <span className="text-lg sm:text-base text-light-fg-primary dark:text-light-fg-tertiary">
                  Open your Authenticator App.
                </span>
                <span className="text-lg sm:text-base text-light-fg-primary dark:text-light-fg-tertiary">
                  Add an account within the app and scan the Qr code bellow
                </span>

                <div className="border-solid border-4 rounded-lg dark:bg-light-bg-tertiary border-light-fg-primary dark:border-dark-fg-primary p-4">
                  <QRCode value={totpData.keyuri} bgColor="none" />
                </div>

                <span className="text-lg sm:text-base text-light-fg-primary dark:text-light-fg-tertiary">
                  Canâ€™t scan and need to type in the text code?
                </span>

                {!isHidden && (
                  <Button text="Show Secret" onClick={hideButton} />
                )}
                {isHidden && (
                  <output className="break-all text-lg sm:text-base text-light-fg-primary border-dashed border-2 rounded-xxl py-2 px-4 bg-light-fg-tertiary">
                    {totpData.secret}
                  </output>
                )}

                <hr className="w-full h-1 bg-light-fg-primary dark:bg-light-fg-tertiary"></hr>

                <span className="text-lg sm:text-base text-light-fg-primary dark:text-light-fg-tertiary">
                  Enter the six-digit code generated by your Authenticator App.
                </span>

                <InputText
                  placeholder="six-digit code..."
                  borderColor="border-light-fg-primary"
                  height="base"
                  width="w-96 sm:w-64"
                  value={token}
                  onChange={(e) => {
                    seToken(e.target.value);
                  }}
                />
                <div ref={completeDevRef}>
                  <Button
                    text="Verify"
                    onClick={verifyTOTPHandler}
                    loading={verifyTOTPMutation.isPending}
                    isSuccess={verifyTOTPMutation.isSuccess}
                  />
                </div>
              </Dialog.Panel>
            </Transition.Child>
          </div>
        </div>
      </Dialog>
    </Transition>
  );
}

export default TFAModal;
